-- Generated by Oracle SQL Developer Data Modeler 20.4.1.406.0906
--   at:        2022-05-14 10:46:50 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE produkt (
    id_produkt                      INTEGER NOT NULL,
    tytul                           VARCHAR(45) NOT NULL,
    artysta                         VARCHAR(45) NOT NULL,
    data_wydania                    VARCHAR(45) NOT NULL,
    gatunek                         VARCHAR(45) NOT NULL,
    liczba_plyt                     INTEGER NOT NULL,
    dlugosc                         DATE NOT NULL,
    dodatki                         VARCHAR(45) NOT NULL,
    dostepnosc                      INTEGER NOT NULL,
    wypozyczalnia_id_wypozyczalnia  INTEGER NOT NULL
);

ALTER TABLE produkt ADD CONSTRAINT produkt_pk PRIMARY KEY ( id_produkt );


CREATE TABLE Produkt_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,id_produkt INTEGER NOT NULL
 ,tytul VARCHAR(45) NOT NULL
 ,artysta VARCHAR(45) NOT NULL
 ,data_wydania VARCHAR(45) NOT NULL
 ,gatunek VARCHAR(45) NOT NULL
 ,liczba_plyt INTEGER NOT NULL
 ,dlugosc DATE NOT NULL
 ,dodatki VARCHAR(45) NOT NULL
 ,dostepnosc INTEGER NOT NULL
 ,Wypozyczalnia_id_wypozyczalnia INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Produkt_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Produkt for each row 
 Declare 
  rec Produkt_JN%ROWTYPE; 
  blank Produkt_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id_produkt := :NEW.id_produkt; 
      rec.tytul := :NEW.tytul; 
      rec.artysta := :NEW.artysta; 
      rec.data_wydania := :NEW.data_wydania; 
      rec.gatunek := :NEW.gatunek; 
      rec.liczba_plyt := :NEW.liczba_plyt; 
      rec.dlugosc := :NEW.dlugosc; 
      rec.dodatki := :NEW.dodatki; 
      rec.dostepnosc := :NEW.dostepnosc; 
      rec.Wypozyczalnia_id_wypozyczalnia := :NEW.Wypozyczalnia_id_wypozyczalnia; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id_produkt := :OLD.id_produkt; 
      rec.tytul := :OLD.tytul; 
      rec.artysta := :OLD.artysta; 
      rec.data_wydania := :OLD.data_wydania; 
      rec.gatunek := :OLD.gatunek; 
      rec.liczba_plyt := :OLD.liczba_plyt; 
      rec.dlugosc := :OLD.dlugosc; 
      rec.dodatki := :OLD.dodatki; 
      rec.dostepnosc := :OLD.dostepnosc; 
      rec.Wypozyczalnia_id_wypozyczalnia := :OLD.Wypozyczalnia_id_wypozyczalnia; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Produkt_JN VALUES rec; 
  END; 
  /CREATE TABLE rola (
    id_rola  INTEGER NOT NULL,
    nazwa    VARCHAR(45) NOT NULL,
    opis     VARCHAR(45) NOT NULL
);

ALTER TABLE rola ADD CONSTRAINT rola_pk PRIMARY KEY ( id_rola );


CREATE TABLE Rola_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,id_rola INTEGER NOT NULL
 ,nazwa VARCHAR(45) NOT NULL
 ,opis VARCHAR(45) NOT NULL
 );

CREATE OR REPLACE TRIGGER Rola_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Rola for each row 
 Declare 
  rec Rola_JN%ROWTYPE; 
  blank Rola_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id_rola := :NEW.id_rola; 
      rec.nazwa := :NEW.nazwa; 
      rec.opis := :NEW.opis; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id_rola := :OLD.id_rola; 
      rec.nazwa := :OLD.nazwa; 
      rec.opis := :OLD.opis; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Rola_JN VALUES rec; 
  END; 
  /CREATE TABLE uzytkownik (
    id_uzytkownik  INTEGER NOT NULL,
    login          VARCHAR(45) NOT NULL,
    pass           VARCHAR(45) NOT NULL,
    imie           VARCHAR(45) NOT NULL,
    nazwisko       VARCHAR(45) NOT NULL,
    email          VARCHAR(45) NOT NULL
);

ALTER TABLE uzytkownik ADD CONSTRAINT uzytkownik_pk PRIMARY KEY ( id_uzytkownik );


CREATE TABLE Uzytkownik_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,id_uzytkownik INTEGER NOT NULL
 ,login VARCHAR(45) NOT NULL
 ,pass VARCHAR(45) NOT NULL
 ,Imie VARCHAR(45) NOT NULL
 ,Nazwisko VARCHAR(45) NOT NULL
 ,Email VARCHAR(45) NOT NULL
 );

CREATE OR REPLACE TRIGGER Uzytkownik_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Uzytkownik for each row 
 Declare 
  rec Uzytkownik_JN%ROWTYPE; 
  blank Uzytkownik_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id_uzytkownik := :NEW.id_uzytkownik; 
      rec.login := :NEW.login; 
      rec.pass := :NEW.pass; 
      rec.Imie := :NEW.Imie; 
      rec.Nazwisko := :NEW.Nazwisko; 
      rec.Email := :NEW.Email; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id_uzytkownik := :OLD.id_uzytkownik; 
      rec.login := :OLD.login; 
      rec.pass := :OLD.pass; 
      rec.Imie := :OLD.Imie; 
      rec.Nazwisko := :OLD.Nazwisko; 
      rec.Email := :OLD.Email; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Uzytkownik_JN VALUES rec; 
  END; 
  /CREATE TABLE uzytkownikrola (
    uzytkownik_id_uzytkownik  INTEGER NOT NULL,
    rola_id_rola              INTEGER NOT NULL,
    "data-nadanie"            DATE NOT NULL,
    data_odbioru              DATE NOT NULL
);

ALTER TABLE uzytkownikrola ADD CONSTRAINT uzytkownikrola_pk PRIMARY KEY ( uzytkownik_id_uzytkownik,
                                                                          rola_id_rola );


CREATE TABLE UzytkownikRola_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,Uzytkownik_id_uzytkownik INTEGER NOT NULL
 ,Rola_id_rola INTEGER NOT NULL
 ,data-nadanie DATE NOT NULL
 ,data_odbioru DATE NOT NULL
 );

CREATE OR REPLACE TRIGGER UzytkownikRola_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON UzytkownikRola for each row 
 Declare 
  rec UzytkownikRola_JN%ROWTYPE; 
  blank UzytkownikRola_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Uzytkownik_id_uzytkownik := :NEW.Uzytkownik_id_uzytkownik; 
      rec.Rola_id_rola := :NEW.Rola_id_rola; 
      rec.data-nadanie := :NEW.data-nadanie; 
      rec.data_odbioru := :NEW.data_odbioru; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Uzytkownik_id_uzytkownik := :OLD.Uzytkownik_id_uzytkownik; 
      rec.Rola_id_rola := :OLD.Rola_id_rola; 
      rec.data-nadanie := :OLD.data-nadanie; 
      rec.data_odbioru := :OLD.data_odbioru; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into UzytkownikRola_JN VALUES rec; 
  END; 
  /CREATE TABLE wypozprodukt (
    wypozyczenie_id_wypozyczenie  INTEGER NOT NULL,
    produkt_id_produkt            INTEGER NOT NULL
);

ALTER TABLE wypozprodukt ADD CONSTRAINT wypozprodukt_pk PRIMARY KEY ( wypozyczenie_id_wypozyczenie,
                                                                      produkt_id_produkt );


CREATE TABLE WypozProdukt_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,Wypozyczenie_id_wypozyczenie INTEGER NOT NULL
 ,Produkt_id_produkt INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER WypozProdukt_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON WypozProdukt for each row 
 Declare 
  rec WypozProdukt_JN%ROWTYPE; 
  blank WypozProdukt_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Wypozyczenie_id_wypozyczenie := :NEW.Wypozyczenie_id_wypozyczenie; 
      rec.Produkt_id_produkt := :NEW.Produkt_id_produkt; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Wypozyczenie_id_wypozyczenie := :OLD.Wypozyczenie_id_wypozyczenie; 
      rec.Produkt_id_produkt := :OLD.Produkt_id_produkt; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into WypozProdukt_JN VALUES rec; 
  END; 
  /CREATE TABLE wypozyczalnia (
    id_wypozyczalnia  INTEGER NOT NULL,
    ulica             VARCHAR(45) NOT NULL,
    miasto            VARCHAR(45) NOT NULL
);

ALTER TABLE wypozyczalnia ADD CONSTRAINT wypozyczalnia_pk PRIMARY KEY ( id_wypozyczalnia );


CREATE TABLE Wypozyczalnia_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,id_wypozyczalnia INTEGER NOT NULL
 ,ulica VARCHAR(45) NOT NULL
 ,miasto VARCHAR(45) NOT NULL
 );

CREATE OR REPLACE TRIGGER Wypozyczalnia_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Wypozyczalnia for each row 
 Declare 
  rec Wypozyczalnia_JN%ROWTYPE; 
  blank Wypozyczalnia_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id_wypozyczalnia := :NEW.id_wypozyczalnia; 
      rec.ulica := :NEW.ulica; 
      rec.miasto := :NEW.miasto; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id_wypozyczalnia := :OLD.id_wypozyczalnia; 
      rec.ulica := :OLD.ulica; 
      rec.miasto := :OLD.miasto; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Wypozyczalnia_JN VALUES rec; 
  END; 
  /CREATE TABLE wypozyczenie (
    id_wypozyczenie           INTEGER NOT NULL,
    data                      DATE NOT NULL,
    zwrot                     INTEGER NOT NULL,
    cena                      DOUBLE NOT NULL,
    uzytkownik_id_uzytkownik  INTEGER NOT NULL
);

ALTER TABLE wypozyczenie ADD CONSTRAINT wypozyczenie_pk PRIMARY KEY ( id_wypozyczenie );


CREATE TABLE Wypozyczenie_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR(240)
 ,JN_APPLN VARCHAR(35)
 ,JN_SESSION DOUBLE(38)
 ,id_wypozyczenie INTEGER NOT NULL
 ,data DATE NOT NULL
 ,zwrot INTEGER NOT NULL
 ,cena DOUBLE NOT NULL
 ,Uzytkownik_id_uzytkownik INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Wypozyczenie_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Wypozyczenie for each row 
 Declare 
  rec Wypozyczenie_JN%ROWTYPE; 
  blank Wypozyczenie_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id_wypozyczenie := :NEW.id_wypozyczenie; 
      rec.data := :NEW.data; 
      rec.zwrot := :NEW.zwrot; 
      rec.cena := :NEW.cena; 
      rec.Uzytkownik_id_uzytkownik := :NEW.Uzytkownik_id_uzytkownik; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id_wypozyczenie := :OLD.id_wypozyczenie; 
      rec.data := :OLD.data; 
      rec.zwrot := :OLD.zwrot; 
      rec.cena := :OLD.cena; 
      rec.Uzytkownik_id_uzytkownik := :OLD.Uzytkownik_id_uzytkownik; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Wypozyczenie_JN VALUES rec; 
  END; 
  /ALTER TABLE produkt
    ADD CONSTRAINT produkt_wypozyczalnia_fk FOREIGN KEY ( wypozyczalnia_id_wypozyczalnia )
        REFERENCES wypozyczalnia ( id_wypozyczalnia );

ALTER TABLE uzytkownikrola
    ADD CONSTRAINT uzytkownikrola_rola_fk FOREIGN KEY ( rola_id_rola )
        REFERENCES rola ( id_rola );

ALTER TABLE uzytkownikrola
    ADD CONSTRAINT uzytkownikrola_uzytkownik_fk FOREIGN KEY ( uzytkownik_id_uzytkownik )
        REFERENCES uzytkownik ( id_uzytkownik );

ALTER TABLE wypozprodukt
    ADD CONSTRAINT wypozprodukt_produkt_fk FOREIGN KEY ( produkt_id_produkt )
        REFERENCES produkt ( id_produkt );

ALTER TABLE wypozprodukt
    ADD CONSTRAINT wypozprodukt_wypozyczenie_fk FOREIGN KEY ( wypozyczenie_id_wypozyczenie )
        REFERENCES wypozyczenie ( id_wypozyczenie );

ALTER TABLE wypozyczenie
    ADD CONSTRAINT wypozyczenie_uzytkownik_fk FOREIGN KEY ( uzytkownik_id_uzytkownik )
        REFERENCES uzytkownik ( id_uzytkownik );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             7
-- CREATE INDEX                             0
-- ALTER TABLE                             13
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
